create table "public"."clients" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone default now(),
    "email" text not null,
    "is_active" boolean not null default true,
    "user_id" uuid not null
);


alter table "public"."clients" enable row level security;

create table "public"."orders" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone default now(),
    "client_id" uuid not null,
    "price" numeric,
    "address" text,
    "zip_code" text,
    "city" text,
    "name" text
);


alter table "public"."orders" enable row level security;

create table "public"."todos" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "hal" real
);


alter table "public"."todos" enable row level security;

CREATE UNIQUE INDEX clients_email_key ON public.clients USING btree (email);

CREATE UNIQUE INDEX clients_pkey ON public.clients USING btree (id);

CREATE UNIQUE INDEX orders_pkey ON public.orders USING btree (id);

CREATE UNIQUE INDEX todos_pkey ON public.todos USING btree (id);

alter table "public"."clients" add constraint "clients_pkey" PRIMARY KEY using index "clients_pkey";

alter table "public"."orders" add constraint "orders_pkey" PRIMARY KEY using index "orders_pkey";

alter table "public"."todos" add constraint "todos_pkey" PRIMARY KEY using index "todos_pkey";

alter table "public"."clients" add constraint "clients_email_key" UNIQUE using index "clients_email_key";

alter table "public"."orders" add constraint "orders_client_id_fkey" FOREIGN KEY (client_id) REFERENCES clients(id) not valid;

alter table "public"."orders" validate constraint "orders_client_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

create policy "Enable insert for authenticated users only"
on "public"."clients"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for users based on user_id"
on "public"."clients"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Enable update for users based on email"
on "public"."clients"
as permissive
for update
to public
using (((auth.jwt() ->> 'email'::text) = email))
with check (((auth.jwt() ->> 'email'::text) = email));


create policy "Enable insert for authenticated users only"
on "public"."orders"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."orders"
as permissive
for select
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."todos"
as permissive
for select
to public
using (true);



